name: 'Terraform S3 Bucket Deployment (Hybrid Auth)'

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

permissions:
  id-token: write   # Required for OIDC token
  contents: read    # Required to checkout code

env:
  TF_VERSION: '1.6.6'
  AWS_REGION: 'us-east-1'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Try IAM Role first (preferred method)
    - name: Configure AWS credentials using IAM Role
      id: role-auth
      continue-on-error: true
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActions-S3-Role
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Terraform-Session

    # Fallback to IAM User if role fails
    - name: Configure AWS credentials using IAM User (Fallback)
      if: steps.role-auth.outcome == 'failure'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_BACKUP }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_BACKUP }}
        aws-region: ${{ env.AWS_REGION }}

    # Verify which authentication method worked
    - name: Verify AWS Identity
      run: |
        echo "üîê Current AWS Identity:"
        aws sts get-caller-identity
        if [[ "${{ steps.role-auth.outcome }}" == "success" ]]; then
          echo "‚úÖ Using IAM Role (Secure Method)"
        else
          echo "‚ö†Ô∏è  Using IAM User (Fallback Method)"
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: |
        terraform plan -input=false \
          -var="bucket_name=${{ secrets.S3_BUCKET_NAME }}" \
          -var="environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
          -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform output

    - name: Upload HTML files to S3
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üì§ Uploading HTML files to S3..."
        if [ -f "terraform-flow-diagram.html" ]; then
          aws s3 cp terraform-flow-diagram.html s3://${{ secrets.S3_BUCKET_NAME }}/ --content-type "text/html"
          echo "‚úÖ Flow diagram uploaded"
        fi
        if [ -f "index.html" ]; then
          aws s3 cp index.html s3://${{ secrets.S3_BUCKET_NAME }}/ --content-type "text/html"
          echo "‚úÖ Index page uploaded"
        fi
